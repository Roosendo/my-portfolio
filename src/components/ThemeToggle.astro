---
import Sun from '@icons/Sun.astro'
import Moon from '@icons/Moon.astro'
import System from '@icons/System.astro'

const THEMES = ['Light', 'Dark', 'System']
---

<div class='relative ml-1 mr-1'>
  <button id='theme-toggle-btn' class='flex appearance-none border-none transition hover:scale-125'>
    <span class='sr-only'>Elige el tema</span>
    <Sun id='light' class='theme-toggle-icon size-5 transition-all' />
    <Moon id='dark' class='theme-toggle-icon absolute size-5 transition-all' />
    <System id='system' class='theme-toggle-icon absolute size-5 transition-all' />
  </button>
  <div
    id='themes-menu'
    class='scale-80 absolute right-0 top-8 min-w-[8rem] rounded-md border border-gray-100 bg-white/70 p-1 text-sm opacity-0 shadow-[0_3px_10px_rgb(0,0,0,0.2)] backdrop-blur-md dark:border-gray-500/20 dark:bg-gray-900/70'
  >
    <ul>
      {
        THEMES.map((theme) => (
          <li class='themes-menu-option cursor-default rounded-sm px-2 py-1.5 hover:bg-neutral-400/40 dark:hover:bg-gray-500/50'>
            {theme}
          </li>
        ))
      }
    </ul>
  </div>
</div>

<style>
  #themes-menu.open {
    animation: scale-up-center 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
  }

  @keyframes scale-up-center {
    from {
      transform: scale(0.8);
      opacity: 0;
    }
    to {
      transform: scale(1);
      opacity: 1;
    }
  }
</style>

<script>
  document.addEventListener('astro:page-load', () => {
    let remove: null | (() => void) = null
    const matchMedia = window.matchMedia('(prefers-color-scheme: dark)')
    const themesMenu = document.getElementById('themes-menu')
    const bodyElement = document.body

    const getThemePreference = () => {
      if (typeof localStorage !== 'undefined') {
        return localStorage.getItem('theme') ?? 'system'
      }
      return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'
    }

    const updateIcon = (themePreference: string) => {
      document.querySelectorAll('.theme-toggle-icon').forEach((element) => {
        const htmlElement = element as HTMLElement
        htmlElement.style.scale = element.id === themePreference ? '1' : '0'
        htmlElement.style.visibility = element.id === themePreference ? 'visible' : 'hidden'
      })
    }

    const updateTheme = () => {
      if (remove != null) {
        remove()
      }
      matchMedia.addEventListener('change', updateTheme)
      remove = () => {
        matchMedia.removeEventListener('change', updateTheme)
      }

      const themePreference = getThemePreference()
      const isDark =
        themePreference === 'dark' || (themePreference === 'system' && matchMedia.matches)

      updateIcon(themePreference)
      bodyElement.classList[isDark ? 'add' : 'remove']('dark')
    }

    updateTheme()

    document.addEventListener('click', () => themesMenu && themesMenu.classList.remove('open'))

    document.getElementById('theme-toggle-btn')?.addEventListener('click', (e) => {
      e.stopPropagation()
      const isClosed = !themesMenu?.classList.contains('open')
      themesMenu?.classList[isClosed ? 'add' : 'remove']('open')
    })

    document.querySelectorAll('.themes-menu-option').forEach((element) => {
      element.addEventListener('click', (e) => {
        localStorage.setItem('theme', (e.target as HTMLDivElement).innerText.toLowerCase().trim())
        updateTheme()
      })
    })
  })
</script>
