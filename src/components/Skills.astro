---
import Trophy from '@icons/Trophy.astro'
import { SKILLS } from '../utils/SKILLS.ts'

import { getI18N } from '@c/i18n'

const { currentLocale } = Astro
const i18n = getI18N({ currentLocale })

const length = SKILLS.length
const halfLength = Math.floor(length / 2)
---

<section class="w-full animate-scroll">
  <div class="flex flex-row items-center w-full p-2 gap-3 dark:text-white/60 text-black/60">
    <Trophy class="md:size-5 size-4" />
    <h3 class="md:text-base text-md">{i18n.SKILLS.LABEL}</h3>
  </div>
  <div class="wrapper">
    {
      SKILLS.slice(0, halfLength).map((skill, index) => (
        <div class=`cursor-default flex justify-center items-center flex-col itemLeft item${index} text-black/70 dark:text-white/90 border border-gray-500 m-auto text-xs md:text-base`>
          <skill.icon class="md:size-5 size-4" />
          <span class="dark:text-white/90 text-black/80 md:text-base text-sm">{skill.name}</span>
        </div>
      ))
    }
  </div>
  <div class="wrapper">
    {
      SKILLS.slice(halfLength, length).map((skill, index) => (
        <div class=`cursor-default flex justify-center items-center flex-col itemRight item${index} text-black/70 dark:text-white/90 border border-gray-500 m-auto text-xs md:text-base`>
          <skill.icon class="md:size-5 size-4" />
          <span class="dark:text-white/90 text-black/80 md:text-base text-sm">{skill.name}</span>
        </div>
      ))
    }
  </div>
</section>

<style>
  .wrapper {
    margin-top: 2rem;
    width: 90%;
    max-width: 1536px;
    margin-inline: auto;
    height: 100px;
    position: relative;
    overflow: hidden;
    mask-image: linear-gradient(
      to right,
      rgba(0, 0, 0, 0),
      rgba(0, 0, 0, 1) 20%,
      rgba(0, 0, 0, 1) 80%,
      rgba(0, 0, 0, 0)
    );
  }

  @keyframes scrollLeft {
    to {
      left: -200px;
    }
  }

  @keyframes scrollRight {
    to {
      right: -200px;
    }
  }

  .itemLeft,
  .itemRight {
    width: 200px;
    height: 100px;
    border-radius: 6px;
    background-color: transparent;
    position: absolute;
    animation-timing-function: linear;
    animation-duration: 30s;
    animation-iteration-count: infinite;
  }

  .itemLeft {
    left: max(calc(200px * 8), 100%);
    animation-name: scrollLeft;
  }

  .itemRight {
    right: max(calc(200px * 8), calc(100% + 200px));
    animation-name: scrollRight;
  }

  .item1 {
    animation-delay: calc(30s / 8 * (8 - 1) * -1);
  }

  .item2 {
    animation-delay: calc(30s / 8 * (8 - 2) * -1);
  }

  .item3 {
    animation-delay: calc(30s / 8 * (8 - 3) * -1);
  }

  .item4 {
    animation-delay: calc(30s / 8 * (8 - 4) * -1);
  }

  .item5 {
    animation-delay: calc(30s / 8 * (8 - 5) * -1);
  }

  .item6 {
    animation-delay: calc(30s / 8 * (8 - 6) * -1);
  }

  .item7 {
    animation-delay: calc(30s / 8 * (8 - 7) * -1);
  }

  .item8 {
    animation-delay: calc(30s / 8 * (8 - 8) * -1);
  }
</style>
