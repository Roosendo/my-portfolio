---
import Trophy from '@icons/Trophy.astro'
import { SKILLS } from '../utils/SKILLS.ts'

import { getI18N } from '@c/i18n'

const { currentLocale } = Astro
const i18n = getI18N({ currentLocale })

const length = SKILLS.length
const halfLength = Math.floor(length / 2)
---

<section class='animate-scroll w-full'>
  <div class='flex w-full flex-row items-center gap-3 p-2 text-black/60 dark:text-white/60'>
    <Trophy class='size-4 md:size-5' />
    <h3 class='text-md md:text-base'>{i18n.SKILLS.LABEL}</h3>
  </div>
  <div class='wrapper'>
    {
      SKILLS.slice(0, halfLength).map((skill, index) => (
        <div
          class={`item itemLeft p-4 m-4 hover:scale-105 transition-transform flex cursor-default flex-col items-center justify-center item${index + 1} m-auto border border-gray-500 text-xs text-black/70 dark:text-white/90 md:text-base`}
        >
          <skill.icon class='size-4 md:size-5' />
          <span class='text-sm text-black/80 dark:text-white/90 md:text-base'>{skill.name}</span>
        </div>
      ))
    }
  </div>
  <div class='wrapper'>
    {
      SKILLS.slice(halfLength, length).map((skill, index) => (
        <div
          class={`item itemRight p-4 m-4 hover:scale-105 flex cursor-default flex-col items-center justify-center item${index + 1} m-auto border border-gray-500 text-xs text-black/70 dark:text-white/90 md:text-base`}
        >
          <skill.icon class='size-4 md:size-5' />
          <span class='text-sm text-black/80 dark:text-white/90 md:text-base'>{skill.name}</span>
        </div>
      ))
    }
  </div>
</section>

<style>
  .wrapper {
    margin-top: 2rem;
    width: 90%;
    max-width: 1536px;
    margin-inline: auto;
    height: 125px;
    position: relative;
    overflow: hidden;
    mask-image: linear-gradient(
      to right,
      rgba(0, 0, 0, 0),
      rgba(0, 0, 0, 1) 20%,
      rgba(0, 0, 0, 1) 80%,
      rgba(0, 0, 0, 0)
    );
  }

  @keyframes scrollLeft {
    to {
      left: -200px;
    }
  }

  @keyframes scrollRight {
    to {
      right: -200px;
    }
  }

  .itemLeft,
  .itemRight {
    width: 200px;
    height: 100px;
    border-radius: 6px;
    background-color: transparent;
    position: absolute;
    animation-timing-function: linear;
    animation-duration: 30s;
    animation-iteration-count: infinite;
  }

  .wrapper:hover .itemLeft,
  .wrapper:hover .itemRight {
    animation-play-state: paused;
  }

  .itemLeft {
    left: max(calc(200px * 8), 100%);
    animation-name: scrollLeft;
  }

  .itemRight {
    right: max(calc(200px * 8), 100%);
    animation-name: scrollRight;
  }

  .item1 {
    animation-delay: calc(30s / 8 * (8 - 1) * -1);
  }

  .item2 {
    animation-delay: calc(30s / 8 * (8 - 2) * -1);
  }

  .item3 {
    animation-delay: calc(30s / 8 * (8 - 3) * -1);
  }

  .item4 {
    animation-delay: calc(30s / 8 * (8 - 4) * -1);
  }

  .item5 {
    animation-delay: calc(30s / 8 * (8 - 5) * -1);
  }

  .item6 {
    animation-delay: calc(30s / 8 * (8 - 6) * -1);
  }

  .item7 {
    animation-delay: calc(30s / 8 * (8 - 7) * -1);
  }

  .item8 {
    animation-delay: calc(30s / 8 * (8 - 8) * -1);
  }
</style>
